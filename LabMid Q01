def sjf_scheduling():
  n=int(input("Enter the number of processes: "))
  processes=[]
  for i in range(1,n+1):
    at=int(input(f"Process {i} Arrival Time: "))
    bt=int(input(f"Process {i} Burst Time: "))
    processes.append([i,at,bt,0,0,0])
  processes.sort(key=lambda x:x[1])
  completed=0
  current_time=0
  is_completed=[False]*n
  while completed!=n:
    idx=-1
    min_bt=float('inf')
    for i in range(n):
      if not is_completed[i] and processes[i][1]<=current_time and processes[i][2]<min_bt:
        min_bt=processes[i][2]
        idx=i
    if idx==-1:
      current_time+=1
    else:
      current_time+=processes[idx][2]
      processes[idx][3]=current_time
      processes[idx][4]=current_time-processes[idx][1]
      processes[idx][5]=processes[idx][4]-processes[idx][2]
      is_completed[idx]=True
      completed+=1
  print("\nPID\tAT\tBT\tCT\tTAT\tWT")
  for p in processes:
    print(f"{p[0]}\t{p[1]}\t{p[2]}\t{p[3]}\t{p[4]}\t{p[5]}")
    
sjf_scheduling()
  
