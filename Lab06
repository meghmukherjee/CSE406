class SSTF_Scheduling:
    def __init__(self, requests, head_start):
        self.head_start = head_start
        self.request = requests[:]
        self.total_seek_operations = 0
        self.seek_sequence = [self.head_start]

    def run(self):
        pending = self.request[:]
        current_position = self.head_start
        while pending:
            next_req = min(pending, key=lambda r: (abs(r - current_position), r))
            movement = abs(next_req - current_position)
            self.total_seek_operations += movement
            self.seek_sequence.append(next_req)
            current_position = next_req
            pending.remove(next_req)

    def display_result(self):
        print("Total Seek Operations:", self.total_seek_operations)
        print("Seek Sequence:", self.seek_sequence)

if __name__ == "__main__":
    requests = list(map(int, input("Enter the request sequence separated by spaces: ").split()))
    head_start = int(input("Enter the initial head position: "))
    sstf = SSTF_Scheduling(requests, head_start)
    sstf.run()
    sstf.display_result()
